test compile precise-output
target riscv64

function %icmp_eq_i128_imm(i128) -> i8 {
block0(v0: i128):
  v1 = iconst.i64 42
  v2 = uextend.i128 v1
  v3 = icmp.i128 eq v0, v2
  return v3
}

; VCode:
; block0:
;   li a4,42
;   li a6,0
;   xor a2,a0,a4
;   xor a4,a1,a6
;   or a6,a2,a4
;   seqz a0,a6
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   addi a4, zero, 0x2a
;   mv a6, zero
;   xor a2, a0, a4
;   xor a4, a1, a6
;   or a6, a2, a4
;   seqz a0, a6
;   ret

function %icmp_ne_i128_imm(i128) -> i8 {
block0(v0: i128):
  v1 = iconst.i64 42
  v2 = uextend.i128 v1
  v3 = icmp.i128 ne v0, v2
  return v3
}

; VCode:
; block0:
;   li a4,42
;   li a6,0
;   xor a2,a0,a4
;   xor a4,a1,a6
;   or a6,a2,a4
;   snez a0,a6
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   addi a4, zero, 0x2a
;   mv a6, zero
;   xor a2, a0, a4
;   xor a4, a1, a6
;   or a6, a2, a4
;   snez a0, a6
;   ret

function %icmp_slt_i128_imm(i128) -> i8 {
block0(v0: i128):
  v1 = iconst.i64 42
  v2 = uextend.i128 v1
  v3 = icmp.i128 slt v0, v2
  return v3
}

; VCode:
; block0:
;   li a2,42
;   li a3,0
;   slt a0,[a0,a1],[a2,a3] ## ty=i128
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   addi a2, zero, 0x2a
;   mv a3, zero
;   beq a1, a3, 0xc
;   slt a0, a1, a3
;   j 8
;   sltu a0, a0, a2
;   ret

function %icmp_sgt_i128_imm(i128) -> i8 {
block0(v0: i128):
  v1 = iconst.i64 42
  v2 = uextend.i128 v1
  v3 = icmp.i128 sgt v0, v2
  return v3
}

; VCode:
; block0:
;   li a2,42
;   li a3,0
;   slt a0,[a2,a3],[a0,a1] ## ty=i128
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   addi a2, zero, 0x2a
;   mv a3, zero
;   beq a3, a1, 0xc
;   slt a0, a3, a1
;   j 8
;   sltu a0, a2, a0
;   ret

function %icmp_sle_i128_imm(i128) -> i8 {
block0(v0: i128):
  v1 = iconst.i64 42
  v2 = uextend.i128 v1
  v3 = icmp.i128 sle v0, v2
  return v3
}

; VCode:
; block0:
;   li a2,42
;   li a4,0
;   slt a2,[a2,a4],[a0,a1] ## ty=i128
;   xori a0,a2,1
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   addi a2, zero, 0x2a
;   mv a4, zero
;   beq a4, a1, 0xc
;   slt a2, a4, a1
;   j 8
;   sltu a2, a2, a0
;   xori a0, a2, 1
;   ret

function %icmp_sge_i128_imm(i128) -> i8 {
block0(v0: i128):
  v1 = iconst.i64 42
  v2 = uextend.i128 v1
  v3 = icmp.i128 sge v0, v2
  return v3
}

; VCode:
; block0:
;   li a2,42
;   li a4,0
;   slt a2,[a0,a1],[a2,a4] ## ty=i128
;   xori a0,a2,1
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   addi a2, zero, 0x2a
;   mv a4, zero
;   beq a1, a4, 0xc
;   slt a2, a1, a4
;   j 8
;   sltu a2, a0, a2
;   xori a0, a2, 1
;   ret

function %icmp_ult_i128_imm(i128) -> i8 {
block0(v0: i128):
  v1 = iconst.i64 42
  v2 = uextend.i128 v1
  v3 = icmp.i128 ult v0, v2
  return v3
}

; VCode:
; block0:
;   li a2,42
;   li a3,0
;   sltu a0,[a0,a1],[a2,a3] ## ty=i128
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   addi a2, zero, 0x2a
;   mv a3, zero
;   beq a1, a3, 0xc
;   sltu a0, a1, a3
;   j 8
;   sltu a0, a0, a2
;   ret

function %icmp_ugt_i128_imm(i128) -> i8 {
block0(v0: i128):
  v1 = iconst.i64 42
  v2 = uextend.i128 v1
  v3 = icmp.i128 ugt v0, v2
  return v3
}

; VCode:
; block0:
;   li a2,42
;   li a3,0
;   sltu a0,[a2,a3],[a0,a1] ## ty=i128
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   addi a2, zero, 0x2a
;   mv a3, zero
;   beq a3, a1, 0xc
;   sltu a0, a3, a1
;   j 8
;   sltu a0, a2, a0
;   ret

function %icmp_ule_i128_imm(i128) -> i8 {
block0(v0: i128):
  v1 = iconst.i64 42
  v2 = uextend.i128 v1
  v3 = icmp.i128 ule v0, v2
  return v3
}

; VCode:
; block0:
;   li a2,42
;   li a4,0
;   sltu a2,[a2,a4],[a0,a1] ## ty=i128
;   xori a0,a2,1
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   addi a2, zero, 0x2a
;   mv a4, zero
;   beq a4, a1, 0xc
;   sltu a2, a4, a1
;   j 8
;   sltu a2, a2, a0
;   xori a0, a2, 1
;   ret

function %icmp_uge_i128_imm(i128) -> i8 {
block0(v0: i128):
  v1 = iconst.i64 42
  v2 = uextend.i128 v1
  v3 = icmp.i128 uge v0, v2
  return v3
}

; VCode:
; block0:
;   li a2,42
;   li a4,0
;   sltu a2,[a0,a1],[a2,a4] ## ty=i128
;   xori a0,a2,1
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   addi a2, zero, 0x2a
;   mv a4, zero
;   beq a1, a4, 0xc
;   sltu a2, a1, a4
;   j 8
;   sltu a2, a0, a2
;   xori a0, a2, 1
;   ret

