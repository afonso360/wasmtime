test compile precise-output
set unwind_info=false
target riscv64 has_v

function %isub_uwidenhigh_i32x4(i32x4, i32x4) -> i64x2 {
block0(v0: i32x4, v1: i32x4):
    v2 = uwiden_high v0
    v3 = uwiden_high v1
    v4 = isub v2, v3
    return v4
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v11,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vslidedown.vi v14,v9,2 #avl=4, #vtype=(e32, m1, ta, ma)
;   vslidedown.vi v8,v11,2 #avl=4, #vtype=(e32, m1, ta, ma)
;   vwsubu.vv v10,v14,v8 #avl=2, #vtype=(e32, mf2, ta, ma)
;   vse8.v v10,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.addi sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   c.mv s0, sp
; block1: ; offset 0xc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   addi t6, s0, 0x10
;   .byte 0x87, 0x84
;   .byte 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x87, 0x85
;   .byte 0x0f, 0x02
;   .byte 0x57, 0x70
;   c.swsp zero, 0x98(sp)
;   .byte 0x57, 0x37
;   c.addiw t4, -0x1c
;   .byte 0x57, 0x34
;   c.addiw t4, -0x14
;   .byte 0x57, 0x70
;   c.beqz a0, 0xdc
;   .byte 0x57, 0x25
;   c.sw s1, 0x54(a3)
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   .byte 0x27, 0x05
;   c.addi tp, 1
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   c.addi sp, 0x10
;   ret

function %isub_uwidenhigh_i16x8(i16x8, i16x8) -> i32x4 {
block0(v0: i16x8, v1: i16x8):
    v2 = uwiden_high v0
    v3 = uwiden_high v1
    v4 = isub v2, v3
    return v4
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v11,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vslidedown.vi v14,v9,4 #avl=8, #vtype=(e16, m1, ta, ma)
;   vslidedown.vi v8,v11,4 #avl=8, #vtype=(e16, m1, ta, ma)
;   vwsubu.vv v10,v14,v8 #avl=4, #vtype=(e16, mf2, ta, ma)
;   vse8.v v10,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.addi sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   c.mv s0, sp
; block1: ; offset 0xc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   addi t6, s0, 0x10
;   .byte 0x87, 0x84
;   .byte 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x87, 0x85
;   .byte 0x0f, 0x02
;   .byte 0x57, 0x70
;   c.sw s1, 0x18(s1)
;   .byte 0x57, 0x37
;   c.fldsp ft9, 0x120(sp)
;   .byte 0x57, 0x34
;   c.fldsp ft9, 0x128(sp)
;   .byte 0x57, 0x70
;   c.swsp t3, 0x58(sp)
;   .byte 0x57, 0x25
;   c.sw s1, 0x54(a3)
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   .byte 0x27, 0x05
;   c.addi tp, 1
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   c.addi sp, 0x10
;   ret

function %isub_uwidenhigh_i8x16(i8x16, i8x16) -> i16x8 {
block0(v0: i8x16, v1: i8x16):
    v2 = uwiden_high v0
    v3 = uwiden_high v1
    v4 = isub v2, v3
    return v4
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v11,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vslidedown.vi v14,v9,8 #avl=16, #vtype=(e8, m1, ta, ma)
;   vslidedown.vi v8,v11,8 #avl=16, #vtype=(e8, m1, ta, ma)
;   vwsubu.vv v10,v14,v8 #avl=8, #vtype=(e8, mf2, ta, ma)
;   vse8.v v10,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.addi sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   c.mv s0, sp
; block1: ; offset 0xc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   addi t6, s0, 0x10
;   .byte 0x87, 0x84
;   .byte 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x87, 0x85
;   .byte 0x0f, 0x02
;   .byte 0x57, 0x37
;   c.fld fa3, 0x38(a3)
;   .byte 0x57, 0x34
;   c.fld fa3, 0x78(a3)
;   .byte 0x57, 0x70
;   c.sw a3, 0x5c(s0)
;   .byte 0x57, 0x25
;   c.sw s1, 0x54(a3)
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   .byte 0x27, 0x05
;   c.addi tp, 1
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   c.addi sp, 0x10
;   ret

function %isub_uwidenhigh_splat_i32x4(i32x4, i32) -> i64x2 {
block0(v0: i32x4, v1: i32):
    v2 = uwiden_high v0
    v3 = uextend.i64 v1
    v4 = splat.i64x2 v3
    v5 = isub v2, v4
    return v5
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vslidedown.vi v13,v9,2 #avl=4, #vtype=(e32, m1, ta, ma)
;   vwsubu.vx v15,v13,a0 #avl=2, #vtype=(e32, mf2, ta, ma)
;   vse8.v v15,0(a1) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.addi sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   c.mv s0, sp
; block1: ; offset 0xc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   addi t6, s0, 0x10
;   .byte 0x87, 0x84
;   .byte 0x0f, 0x02
;   .byte 0x57, 0x70
;   c.swsp zero, 0x98(sp)
;   .byte 0xd7, 0x36
;   c.addiw t4, -0x1c
;   .byte 0x57, 0x70
;   c.beqz a0, 0xdc
;   .byte 0xd7, 0x67
;   c.beqz a3, 0xb4
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   .byte 0xa7, 0x87
;   c.addi tp, 1
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   c.addi sp, 0x10
;   ret

function %isub_uwidenhigh_splat_i16x8(i16x8, i16) -> i32x4 {
block0(v0: i16x8, v1: i16):
    v2 = uwiden_high v0
    v3 = uextend.i32 v1
    v4 = splat.i32x4 v3
    v5 = isub v2, v4
    return v5
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vslidedown.vi v13,v9,4 #avl=8, #vtype=(e16, m1, ta, ma)
;   vwsubu.vx v15,v13,a0 #avl=4, #vtype=(e16, mf2, ta, ma)
;   vse8.v v15,0(a1) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.addi sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   c.mv s0, sp
; block1: ; offset 0xc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   addi t6, s0, 0x10
;   .byte 0x87, 0x84
;   .byte 0x0f, 0x02
;   .byte 0x57, 0x70
;   c.sw s1, 0x18(s1)
;   .byte 0xd7, 0x36
;   c.fldsp ft9, 0x120(sp)
;   .byte 0x57, 0x70
;   c.swsp t3, 0x58(sp)
;   .byte 0xd7, 0x67
;   c.beqz a3, 0xb4
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   .byte 0xa7, 0x87
;   c.addi tp, 1
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   c.addi sp, 0x10
;   ret

function %isub_uwidenhigh_splat_i8x16(i8x16, i8) -> i16x8 {
block0(v0: i8x16, v1: i8):
    v2 = uwiden_high v0
    v3 = uextend.i16 v1
    v4 = splat.i16x8 v3
    v5 = isub v2, v4
    return v5
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vslidedown.vi v13,v9,8 #avl=16, #vtype=(e8, m1, ta, ma)
;   vwsubu.vx v15,v13,a0 #avl=8, #vtype=(e8, mf2, ta, ma)
;   vse8.v v15,0(a1) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.addi sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   c.mv s0, sp
; block1: ; offset 0xc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   addi t6, s0, 0x10
;   .byte 0x87, 0x84
;   .byte 0x0f, 0x02
;   .byte 0xd7, 0x36
;   c.fld fa3, 0x38(a3)
;   .byte 0x57, 0x70
;   c.sw a3, 0x5c(s0)
;   .byte 0xd7, 0x67
;   c.beqz a3, 0xb4
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   .byte 0xa7, 0x87
;   c.addi tp, 1
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   c.addi sp, 0x10
;   ret

function %isub_uwidenhigh_lhs_i32x4(i32x4, i64x2) -> i64x2 {
block0(v0: i32x4, v1: i64x2):
    v2 = uwiden_high v0
    v3 = isub v1, v2
    return v3
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v11,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vslidedown.vi v14,v9,2 #avl=4, #vtype=(e32, m1, ta, ma)
;   vwsubu.wv v8,v11,v14 #avl=2, #vtype=(e32, mf2, ta, ma)
;   vse8.v v8,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.addi sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   c.mv s0, sp
; block1: ; offset 0xc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   addi t6, s0, 0x10
;   .byte 0x87, 0x84
;   .byte 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x87, 0x85
;   .byte 0x0f, 0x02
;   .byte 0x57, 0x70
;   c.swsp zero, 0x98(sp)
;   .byte 0x57, 0x37
;   c.addiw t4, -0x1c
;   .byte 0x57, 0x70
;   c.beqz a0, 0xdc
;   .byte 0x57, 0x24
;   lui s5, 0x7057d
;   c.sw a0, 0x18(s0)
;   .byte 0x27, 0x04
;   c.addi tp, 1
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   c.addi sp, 0x10
;   ret

function %isub_uwidenhigh_lhs_i16x8(i16x8, i32x4) -> i32x4 {
block0(v0: i16x8, v1: i32x4):
    v2 = uwiden_high v0
    v3 = isub v1, v2
    return v3
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v11,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vslidedown.vi v14,v9,4 #avl=8, #vtype=(e16, m1, ta, ma)
;   vwsubu.wv v8,v11,v14 #avl=4, #vtype=(e16, mf2, ta, ma)
;   vse8.v v8,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.addi sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   c.mv s0, sp
; block1: ; offset 0xc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   addi t6, s0, 0x10
;   .byte 0x87, 0x84
;   .byte 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x87, 0x85
;   .byte 0x0f, 0x02
;   .byte 0x57, 0x70
;   c.sw s1, 0x18(s1)
;   .byte 0x57, 0x37
;   c.fldsp ft9, 0x120(sp)
;   .byte 0x57, 0x70
;   c.swsp t3, 0x58(sp)
;   .byte 0x57, 0x24
;   lui s5, 0x7057d
;   c.sw a0, 0x18(s0)
;   .byte 0x27, 0x04
;   c.addi tp, 1
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   c.addi sp, 0x10
;   ret

function %isub_uwidenhigh_lhs_i8x16(i8x16, i16x8) -> i16x8 {
block0(v0: i8x16, v1: i16x8):
    v2 = uwiden_high v0
    v3 = isub v1, v2
    return v3
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v11,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vslidedown.vi v14,v9,8 #avl=16, #vtype=(e8, m1, ta, ma)
;   vwsubu.wv v8,v11,v14 #avl=8, #vtype=(e8, mf2, ta, ma)
;   vse8.v v8,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.addi sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   c.mv s0, sp
; block1: ; offset 0xc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   addi t6, s0, 0x10
;   .byte 0x87, 0x84
;   .byte 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x87, 0x85
;   .byte 0x0f, 0x02
;   .byte 0x57, 0x37
;   c.fld fa3, 0x38(a3)
;   .byte 0x57, 0x70
;   c.sw a3, 0x5c(s0)
;   .byte 0x57, 0x24
;   lui s5, 0x7057d
;   c.sw a0, 0x18(s0)
;   .byte 0x27, 0x04
;   c.addi tp, 1
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   c.addi sp, 0x10
;   ret

