test compile precise-output
set unwind_info=false
target riscv64 has_v

function %unarrow_i16x8(i16x8, i16x8) -> i8x16 {
block0(v0: i16x8, v1: i16x8):
    v2 = unarrow v0, v1
    return v2
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v11,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmax.vx v14,v9,zero #avl=8, #vtype=(e16, m1, ta, ma)
;   vmax.vx v8,v11,zero #avl=8, #vtype=(e16, m1, ta, ma)
;   vnclipu.wi v12,v14,0 #avl=8, #vtype=(e8, mf2, ta, ma)
;   vnclipu.wi v13,v8,0 #avl=8, #vtype=(e8, mf2, ta, ma)
;   vslideup.vi v12,v13,8 #avl=16, #vtype=(e8, m1, ta, ma)
;   vse8.v v12,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   c.mv s0, sp
; block1: ; offset 0xe
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   addi t6, s0, 0x10
;   .byte 0x87, 0x84
;   .byte 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x87, 0x85
;   .byte 0x0f, 0x02
;   .byte 0x57, 0x70
;   c.sw s1, 0x18(s1)
;   .byte 0x57, 0x47
;   c.addi4spn a2, sp, 0x370
;   .byte 0x57, 0x44
;   c.addi4spn a2, sp, 0x378
;   .byte 0x57, 0x70
;   c.sw a3, 0x5c(s0)
;   .byte 0x57, 0x36
;   c.fsd fs0, 0xf0(a3)
;   .byte 0xd7, 0x36
;   c.fsd fs0, 0x30(a3)
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   .byte 0x57, 0x36
;   c.fld fa3, 0xb0(a3)
;   .byte 0x27, 0x06
;   c.addi tp, 1
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %unarrow_i32x4(i32x4, i32x4) -> i16x8 {
block0(v0: i32x4, v1: i32x4):
    v2 = unarrow v0, v1
    return v2
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v11,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmax.vx v14,v9,zero #avl=4, #vtype=(e32, m1, ta, ma)
;   vmax.vx v8,v11,zero #avl=4, #vtype=(e32, m1, ta, ma)
;   vnclipu.wi v12,v14,0 #avl=4, #vtype=(e16, mf2, ta, ma)
;   vnclipu.wi v13,v8,0 #avl=4, #vtype=(e16, mf2, ta, ma)
;   vslideup.vi v12,v13,4 #avl=8, #vtype=(e16, m1, ta, ma)
;   vse8.v v12,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   c.mv s0, sp
; block1: ; offset 0xe
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   addi t6, s0, 0x10
;   .byte 0x87, 0x84
;   .byte 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x87, 0x85
;   .byte 0x0f, 0x02
;   .byte 0x57, 0x70
;   c.swsp zero, 0x98(sp)
;   .byte 0x57, 0x47
;   c.addi4spn a2, sp, 0x370
;   .byte 0x57, 0x44
;   c.addi4spn a2, sp, 0x378
;   .byte 0x57, 0x70
;   c.swsp t3, 0x58(sp)
;   .byte 0x57, 0x36
;   c.fsd fs0, 0xf0(a3)
;   .byte 0xd7, 0x36
;   c.fsd fs0, 0x30(a3)
;   .byte 0x57, 0x70
;   c.sw s1, 0x18(s1)
;   .byte 0x57, 0x36
;   c.fldsp fs5, 0x130(sp)
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   .byte 0x27, 0x06
;   c.addi tp, 1
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %unarrow_i64x2(i64x2, i64x2) -> i32x4 {
block0(v0: i64x2, v1: i64x2):
    v2 = unarrow v0, v1
    return v2
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v11,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmax.vx v14,v9,zero #avl=2, #vtype=(e64, m1, ta, ma)
;   vmax.vx v8,v11,zero #avl=2, #vtype=(e64, m1, ta, ma)
;   vnclipu.wi v12,v14,0 #avl=2, #vtype=(e32, mf2, ta, ma)
;   vnclipu.wi v13,v8,0 #avl=2, #vtype=(e32, mf2, ta, ma)
;   vslideup.vi v12,v13,2 #avl=4, #vtype=(e32, m1, ta, ma)
;   vse8.v v12,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   c.mv s0, sp
; block1: ; offset 0xe
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   addi t6, s0, 0x10
;   .byte 0x87, 0x84
;   .byte 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x87, 0x85
;   .byte 0x0f, 0x02
;   .byte 0x57, 0x70
;   c.beqz a1, 0x18
;   .byte 0x57, 0x47
;   c.addi4spn a2, sp, 0x370
;   .byte 0x57, 0x44
;   c.addi4spn a2, sp, 0x378
;   .byte 0x57, 0x70
;   c.beqz a0, 0xdc
;   .byte 0x57, 0x36
;   c.fsd fs0, 0xf0(a3)
;   .byte 0xd7, 0x36
;   c.fsd fs0, 0x30(a3)
;   .byte 0x57, 0x70
;   c.swsp zero, 0x98(sp)
;   .byte 0x57, 0x36
;   c.addiw s5, -0xc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   .byte 0x27, 0x06
;   c.addi tp, 1
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

