test compile precise-output
set unwind_info=false
target riscv64 has_v

function %iadd_splat_sextend_i16x8(i16x8, i8) -> i16x8 {
block0(v0: i16x8, v1: i8):
    v2 = sextend.i16 v1
    v3 = splat.i16x8 v2
    v4 = iadd v0, v3
    return v4
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vwadd.wx v13,v9,a0 #avl=8, #vtype=(e8, mf2, ta, ma)
;   vse8.v v13,0(a1) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.addi16sp sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   c.mv s0, sp
; block1: ; offset 0xc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   addi t6, s0, 0x10
;   .byte 0x87, 0x84
;   .byte 0x0f, 0x02
;   .byte 0x57, 0x70
;   c.sw a3, 0x5c(s0)
;   .byte 0xd7, 0x66
;   c.beqz a3, -0xd4
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   .byte 0xa7, 0x86
;   c.addi tp, 1
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   c.addi16sp sp, 0x10
;   ret

function %iadd_splat_sextend_i32x4(i32x4, i16) -> i32x4 {
block0(v0: i32x4, v1: i16):
    v2 = sextend.i32 v1
    v3 = splat.i32x4 v2
    v4 = iadd v0, v3
    return v4
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vwadd.wx v13,v9,a0 #avl=4, #vtype=(e16, mf2, ta, ma)
;   vse8.v v13,0(a1) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.addi16sp sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   c.mv s0, sp
; block1: ; offset 0xc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   addi t6, s0, 0x10
;   .byte 0x87, 0x84
;   .byte 0x0f, 0x02
;   .byte 0x57, 0x70
;   c.swsp t3, 0x58(sp)
;   .byte 0xd7, 0x66
;   c.beqz a3, -0xd4
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   .byte 0xa7, 0x86
;   c.addi tp, 1
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   c.addi16sp sp, 0x10
;   ret

function %iadd_splat_sextend_i64x2(i64x2, i32) -> i64x2 {
block0(v0: i64x2, v1: i32):
    v2 = sextend.i64 v1
    v3 = splat.i64x2 v2
    v4 = iadd v0, v3
    return v4
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vwadd.wx v13,v9,a0 #avl=2, #vtype=(e32, mf2, ta, ma)
;   vse8.v v13,0(a1) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.addi16sp sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   c.mv s0, sp
; block1: ; offset 0xc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   addi t6, s0, 0x10
;   .byte 0x87, 0x84
;   .byte 0x0f, 0x02
;   .byte 0x57, 0x70
;   c.beqz a0, 0xdc
;   .byte 0xd7, 0x66
;   c.beqz a3, -0xd4
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   .byte 0xa7, 0x86
;   c.addi tp, 1
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   c.addi16sp sp, 0x10
;   ret

function %iadd_splat_uextend_i16x8(i16x8, i8) -> i16x8 {
block0(v0: i16x8, v1: i8):
    v2 = uextend.i16 v1
    v3 = splat.i16x8 v2
    v4 = iadd v0, v3
    return v4
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vwaddu.wx v13,v9,a0 #avl=8, #vtype=(e8, mf2, ta, ma)
;   vse8.v v13,0(a1) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.addi16sp sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   c.mv s0, sp
; block1: ; offset 0xc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   addi t6, s0, 0x10
;   .byte 0x87, 0x84
;   .byte 0x0f, 0x02
;   .byte 0x57, 0x70
;   c.sw a3, 0x5c(s0)
;   .byte 0xd7, 0x66
;   c.beqz a3, -0xdc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   .byte 0xa7, 0x86
;   c.addi tp, 1
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   c.addi16sp sp, 0x10
;   ret

function %iadd_splat_uextend_i32x4(i32x4, i16) -> i32x4 {
block0(v0: i32x4, v1: i16):
    v2 = uextend.i32 v1
    v3 = splat.i32x4 v2
    v4 = iadd v0, v3
    return v4
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vwaddu.wx v13,v9,a0 #avl=4, #vtype=(e16, mf2, ta, ma)
;   vse8.v v13,0(a1) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.addi16sp sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   c.mv s0, sp
; block1: ; offset 0xc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   addi t6, s0, 0x10
;   .byte 0x87, 0x84
;   .byte 0x0f, 0x02
;   .byte 0x57, 0x70
;   c.swsp t3, 0x58(sp)
;   .byte 0xd7, 0x66
;   c.beqz a3, -0xdc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   .byte 0xa7, 0x86
;   c.addi tp, 1
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   c.addi16sp sp, 0x10
;   ret

function %iadd_splat_uextend_i64x2(i64x2, i32) -> i64x2 {
block0(v0: i64x2, v1: i32):
    v2 = uextend.i64 v1
    v3 = splat.i64x2 v2
    v4 = iadd v0, v3
    return v4
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vwaddu.wx v13,v9,a0 #avl=2, #vtype=(e32, mf2, ta, ma)
;   vse8.v v13,0(a1) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.addi16sp sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   c.mv s0, sp
; block1: ; offset 0xc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   addi t6, s0, 0x10
;   .byte 0x87, 0x84
;   .byte 0x0f, 0x02
;   .byte 0x57, 0x70
;   c.beqz a0, 0xdc
;   .byte 0xd7, 0x66
;   c.beqz a3, -0xdc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   .byte 0xa7, 0x86
;   c.addi tp, 1
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   c.addi16sp sp, 0x10
;   ret

