test compile precise-output
target riscv64

function %icmp_eq_i128(i128, i128) -> i8 {
block0(v0: i128, v1: i128):
  v2 = icmp.i128 eq v0, v1
  return v2
}

; VCode:
; block0:
;   eq a0,[a0,a1],[a2,a3]##ty=i128
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   bne a1, a3, 0x10
;   bne a0, a2, 0xc
;   addi a0, zero, 1
;   j 8
;   mv a0, zero
;   ret

function %icmp_ne_i128(i128, i128) -> i8 {
block0(v0: i128, v1: i128):
  v2 = icmp.i128 ne v0, v1
  return v2
}

; VCode:
; block0:
;   ne a0,[a0,a1],[a2,a3]##ty=i128
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   bne a1, a3, 8
;   beq a0, a2, 0xc
;   addi a0, zero, 1
;   j 8
;   mv a0, zero
;   ret

function %icmp_slt_i128(i128, i128) -> i8 {
block0(v0: i128, v1: i128):
  v2 = icmp.i128 slt v0, v1
  return v2
}

; VCode:
; block0:
;   slt a0,[a0,a1],[a2,a3]##ty=i128
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   blt a1, a3, 0xc
;   bne a1, a3, 0x10
;   bgeu a0, a2, 0xc
;   addi a0, zero, 1
;   j 8
;   mv a0, zero
;   ret

function %icmp_sgt_i128(i128, i128) -> i8 {
block0(v0: i128, v1: i128):
  v2 = icmp.i128 sgt v0, v1
  return v2
}

; VCode:
; block0:
;   sgt a0,[a0,a1],[a2,a3]##ty=i128
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   blt a3, a1, 0xc
;   bne a1, a3, 0x10
;   bgeu a2, a0, 0xc
;   addi a0, zero, 1
;   j 8
;   mv a0, zero
;   ret

function %icmp_sle_i128(i128, i128) -> i8 {
block0(v0: i128, v1: i128):
  v2 = icmp.i128 sle v0, v1
  return v2
}

; VCode:
; block0:
;   sle a0,[a0,a1],[a2,a3]##ty=i128
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   blt a1, a3, 0xc
;   bne a1, a3, 0x10
;   bltu a2, a0, 0xc
;   addi a0, zero, 1
;   j 8
;   mv a0, zero
;   ret

function %icmp_sge_i128(i128, i128) -> i8 {
block0(v0: i128, v1: i128):
  v2 = icmp.i128 sge v0, v1
  return v2
}

; VCode:
; block0:
;   sge a0,[a0,a1],[a2,a3]##ty=i128
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   blt a3, a1, 0xc
;   bne a1, a3, 0x10
;   bltu a0, a2, 0xc
;   addi a0, zero, 1
;   j 8
;   mv a0, zero
;   ret

function %icmp_ult_i128(i128, i128) -> i8 {
block0(v0: i128, v1: i128):
  v2 = icmp.i128 ult v0, v1
  return v2
}

; VCode:
; block0:
;   ult a0,[a0,a1],[a2,a3]##ty=i128
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   bltu a1, a3, 0xc
;   bne a1, a3, 0x10
;   bgeu a0, a2, 0xc
;   addi a0, zero, 1
;   j 8
;   mv a0, zero
;   ret

function %icmp_ugt_i128(i128, i128) -> i8 {
block0(v0: i128, v1: i128):
  v2 = icmp.i128 ugt v0, v1
  return v2
}

; VCode:
; block0:
;   ugt a0,[a0,a1],[a2,a3]##ty=i128
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   bltu a3, a1, 0xc
;   bne a1, a3, 0x10
;   bgeu a2, a0, 0xc
;   addi a0, zero, 1
;   j 8
;   mv a0, zero
;   ret

function %icmp_ule_i128(i128, i128) -> i8 {
block0(v0: i128, v1: i128):
  v2 = icmp.i128 ule v0, v1
  return v2
}

; VCode:
; block0:
;   ule a0,[a0,a1],[a2,a3]##ty=i128
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   bltu a1, a3, 0xc
;   bne a1, a3, 0x10
;   bltu a2, a0, 0xc
;   addi a0, zero, 1
;   j 8
;   mv a0, zero
;   ret

function %icmp_uge_i128(i128, i128) -> i8 {
block0(v0: i128, v1: i128):
  v2 = icmp.i128 uge v0, v1
  return v2
}

; VCode:
; block0:
;   uge a0,[a0,a1],[a2,a3]##ty=i128
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   bltu a3, a1, 0xc
;   bne a1, a3, 0x10
;   bltu a0, a2, 0xc
;   addi a0, zero, 1
;   j 8
;   mv a0, zero
;   ret

