test compile precise-output
target riscv64

function %icmp_eq_i128(i128, i128) -> i8 {
block0(v0: i128, v1: i128):
  v2 = icmp.i128 eq v0, v1
  return v2
}

; VCode:
; block0:
;   xor a2,a0,a2
;   xor a4,a1,a3
;   or a6,a2,a4
;   seqz a0,a6
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   xor a2, a0, a2
;   xor a4, a1, a3
;   or a6, a2, a4
;   seqz a0, a6
;   ret

function %icmp_ne_i128(i128, i128) -> i8 {
block0(v0: i128, v1: i128):
  v2 = icmp.i128 ne v0, v1
  return v2
}

; VCode:
; block0:
;   xor a2,a0,a2
;   xor a4,a1,a3
;   or a6,a2,a4
;   snez a0,a6
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   xor a2, a0, a2
;   xor a4, a1, a3
;   or a6, a2, a4
;   snez a0, a6
;   ret

function %icmp_slt_i128(i128, i128) -> i8 {
block0(v0: i128, v1: i128):
  v2 = icmp.i128 slt v0, v1
  return v2
}

; VCode:
; block0:
;   mv a6,a2
;   slt a2,a1,a3
;   slt a4,a0,a6
;   select_reg a0,a4,a2##condition=(a1 eq a3)
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   ori a6, a2, 0
;   slt a2, a1, a3
;   slt a4, a0, a6
;   beq a1, a3, 0xc
;   ori a0, a2, 0
;   j 8
;   ori a0, a4, 0
;   ret

function %icmp_sgt_i128(i128, i128) -> i8 {
block0(v0: i128, v1: i128):
  v2 = icmp.i128 sgt v0, v1
  return v2
}

; VCode:
; block0:
;   mv a6,a2
;   slt a2,a3,a1
;   slt a4,a6,a0
;   select_reg a0,a4,a2##condition=(a3 eq a1)
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   ori a6, a2, 0
;   slt a2, a3, a1
;   slt a4, a6, a0
;   beq a3, a1, 0xc
;   ori a0, a2, 0
;   j 8
;   ori a0, a4, 0
;   ret

function %icmp_sle_i128(i128, i128) -> i8 {
block0(v0: i128, v1: i128):
  v2 = icmp.i128 sle v0, v1
  return v2
}

; VCode:
; block0:
;   mv a7,a2
;   slt a2,a3,a1
;   slt a4,a7,a0
;   select_reg a6,a4,a2##condition=(a3 eq a1)
;   xori a0,a6,1
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   ori a7, a2, 0
;   slt a2, a3, a1
;   slt a4, a7, a0
;   beq a3, a1, 0xc
;   ori a6, a2, 0
;   j 8
;   ori a6, a4, 0
;   xori a0, a6, 1
;   ret

function %icmp_sge_i128(i128, i128) -> i8 {
block0(v0: i128, v1: i128):
  v2 = icmp.i128 sge v0, v1
  return v2
}

; VCode:
; block0:
;   mv a7,a2
;   slt a2,a1,a3
;   slt a4,a0,a7
;   select_reg a6,a4,a2##condition=(a1 eq a3)
;   xori a0,a6,1
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   ori a7, a2, 0
;   slt a2, a1, a3
;   slt a4, a0, a7
;   beq a1, a3, 0xc
;   ori a6, a2, 0
;   j 8
;   ori a6, a4, 0
;   xori a0, a6, 1
;   ret

function %icmp_ult_i128(i128, i128) -> i8 {
block0(v0: i128, v1: i128):
  v2 = icmp.i128 ult v0, v1
  return v2
}

; VCode:
; block0:
;   mv a6,a2
;   sltu a2,a1,a3
;   slt a4,a0,a6
;   select_reg a0,a4,a2##condition=(a1 eq a3)
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   ori a6, a2, 0
;   sltu a2, a1, a3
;   slt a4, a0, a6
;   beq a1, a3, 0xc
;   ori a0, a2, 0
;   j 8
;   ori a0, a4, 0
;   ret

function %icmp_ugt_i128(i128, i128) -> i8 {
block0(v0: i128, v1: i128):
  v2 = icmp.i128 ugt v0, v1
  return v2
}

; VCode:
; block0:
;   mv a6,a2
;   sltu a2,a3,a1
;   slt a4,a6,a0
;   select_reg a0,a4,a2##condition=(a3 eq a1)
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   ori a6, a2, 0
;   sltu a2, a3, a1
;   slt a4, a6, a0
;   beq a3, a1, 0xc
;   ori a0, a2, 0
;   j 8
;   ori a0, a4, 0
;   ret

function %icmp_ule_i128(i128, i128) -> i8 {
block0(v0: i128, v1: i128):
  v2 = icmp.i128 ule v0, v1
  return v2
}

; VCode:
; block0:
;   mv a7,a2
;   sltu a2,a3,a1
;   slt a4,a7,a0
;   select_reg a6,a4,a2##condition=(a3 eq a1)
;   xori a0,a6,1
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   ori a7, a2, 0
;   sltu a2, a3, a1
;   slt a4, a7, a0
;   beq a3, a1, 0xc
;   ori a6, a2, 0
;   j 8
;   ori a6, a4, 0
;   xori a0, a6, 1
;   ret

function %icmp_uge_i128(i128, i128) -> i8 {
block0(v0: i128, v1: i128):
  v2 = icmp.i128 uge v0, v1
  return v2
}

; VCode:
; block0:
;   mv a7,a2
;   sltu a2,a1,a3
;   slt a4,a0,a7
;   select_reg a6,a4,a2##condition=(a1 eq a3)
;   xori a0,a6,1
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   ori a7, a2, 0
;   sltu a2, a1, a3
;   slt a4, a0, a7
;   beq a1, a3, 0xc
;   ori a6, a2, 0
;   j 8
;   ori a6, a4, 0
;   xori a0, a6, 1
;   ret

