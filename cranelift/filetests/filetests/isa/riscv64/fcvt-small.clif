test compile precise-output
set unwind_info=false
target riscv64

function u0:0(i8) -> f32 {
block0(v0: i8):
    v1 = fcvt_from_uint.f32 v0
    return v1
}

; VCode:
; block0:
;   andi a2,a0,255
;   fcvt.s.lu fa0,a2
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   andi a2, a0, 0xff
;   fcvt.s.lu fa0, a2
;   ret

function u0:0(i8) -> f64 {
block0(v0: i8):
    v1 = fcvt_from_uint.f64 v0
    return v1
}

; VCode:
; block0:
;   andi a2,a0,255
;   fcvt.d.lu fa0,a2
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   andi a2, a0, 0xff
;   fcvt.d.lu fa0, a2
;   ret

function u0:0(i16) -> f32 {
block0(v0: i16):
    v1 = fcvt_from_uint.f32 v0
    return v1
}

; VCode:
; block0:
;   slli a2,a0,48
;   srli a4,a2,48
;   fcvt.s.lu fa0,a4
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   slli a2, a0, 0x30
;   srli a4, a2, 0x30
;   fcvt.s.lu fa0, a4
;   ret

function u0:0(i16) -> f64 {
block0(v0: i16):
    v1 = fcvt_from_uint.f64 v0
    return v1
}

; VCode:
; block0:
;   slli a2,a0,48
;   srli a4,a2,48
;   fcvt.d.lu fa0,a4
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   slli a2, a0, 0x30
;   srli a4, a2, 0x30
;   fcvt.d.lu fa0, a4
;   ret

function u0:0(f32) -> i8 {
block0(v0: f32):
    v1 = fcvt_to_uint.i8 v0
    return v1
}

; VCode:
; block0:
;   fcvt_to_uint.i8 a0,fa0##in_ty=f32 tmp=fa3
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   feq.s a0, fa0, fa0
;   c.beqz a0, 0x3a
;   auipc t6, 0
;   lw t6, 0xa(t6)
;   c.j 6
;   c.unimp
;   c.fsd fs0, 0x38(a5)
;   fmv.w.x fa3, t6
;   fle.s a0, fa0, fa3
;   beqz a0, 8
;   c.unimp ; trap: int_ovf
;   c.unimp
;   lui t6, 0x43800
;   fmv.w.x fa3, t6
;   fle.s a0, fa3, fa0
;   beqz a0, 8
;   c.unimp ; trap: int_ovf
;   c.unimp
;   fcvt.wu.s a0, fa0, rtz
;   c.j 6
;   c.unimp ; trap: bad_toint
;   c.unimp
;   ret

function u0:0(f64) -> i8 {
block0(v0: f64):
    v1 = fcvt_to_uint.i8 v0
    return v1
}

; VCode:
; block0:
;   fcvt_to_uint.i8 a0,fa0##in_ty=f64 tmp=fa3
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   feq.d a0, fa0, fa0
;   c.beqz a0, 0x4c
;   auipc t6, 0
;   ld t6, 0xa(t6)
;   c.j 0xa
;   c.unimp
;   c.unimp
;   c.unimp
;   c.fsd fa2, 0xf8(a5)
;   fmv.d.x fa3, t6
;   fle.d a0, fa0, fa3
;   beqz a0, 8
;   c.unimp ; trap: int_ovf
;   c.unimp
;   auipc t6, 0
;   ld t6, 0xa(t6)
;   c.j 0xa
;   c.unimp
;   c.unimp
;   c.unimp
;   c.lw a2, 0x44(s0)
;   fmv.d.x fa3, t6
;   fle.d a0, fa3, fa0
;   beqz a0, 8
;   c.unimp ; trap: int_ovf
;   c.unimp
;   fcvt.wu.d a0, fa0, rtz
;   c.j 6
;   c.unimp ; trap: bad_toint
;   c.unimp
;   ret

function u0:0(f32) -> i16 {
block0(v0: f32):
    v1 = fcvt_to_uint.i16 v0
    return v1
}

; VCode:
; block0:
;   fcvt_to_uint.i16 a0,fa0##in_ty=f32 tmp=fa3
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   feq.s a0, fa0, fa0
;   c.beqz a0, 0x3a
;   auipc t6, 0
;   lw t6, 0xa(t6)
;   c.j 6
;   c.unimp
;   c.fsd fs0, 0x38(a5)
;   fmv.w.x fa3, t6
;   fle.s a0, fa0, fa3
;   beqz a0, 8
;   c.unimp ; trap: int_ovf
;   c.unimp
;   lui t6, 0x47800
;   fmv.w.x fa3, t6
;   fle.s a0, fa3, fa0
;   beqz a0, 8
;   c.unimp ; trap: int_ovf
;   c.unimp
;   fcvt.wu.s a0, fa0, rtz
;   c.j 6
;   c.unimp ; trap: bad_toint
;   c.unimp
;   ret

function u0:0(f64) -> i16 {
block0(v0: f64):
    v1 = fcvt_to_uint.i16 v0
    return v1
}

; VCode:
; block0:
;   fcvt_to_uint.i16 a0,fa0##in_ty=f64 tmp=fa3
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   feq.d a0, fa0, fa0
;   c.beqz a0, 0x4c
;   auipc t6, 0
;   ld t6, 0xa(t6)
;   c.j 0xa
;   c.unimp
;   c.unimp
;   c.unimp
;   c.fsd fa2, 0xf8(a5)
;   fmv.d.x fa3, t6
;   fle.d a0, fa0, fa3
;   beqz a0, 8
;   c.unimp ; trap: int_ovf
;   c.unimp
;   auipc t6, 0
;   ld t6, 0xa(t6)
;   c.j 0xa
;   c.unimp
;   c.unimp
;   c.unimp
;   c.lw a2, 0x44(s1)
;   fmv.d.x fa3, t6
;   fle.d a0, fa3, fa0
;   beqz a0, 8
;   c.unimp ; trap: int_ovf
;   c.unimp
;   fcvt.wu.d a0, fa0, rtz
;   c.j 6
;   c.unimp ; trap: bad_toint
;   c.unimp
;   ret

