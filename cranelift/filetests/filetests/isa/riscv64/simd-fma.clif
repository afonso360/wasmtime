test compile precise-output
set unwind_info=false
target riscv64 has_v

function %fma_f64x2(f64x2, f64x2, f64x2) -> f64x2 {
block0(v0: f64x2, v1: f64x2, v2: f64x2):
    v3 = fma v0, v1, v2
    return v3
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v11,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v15,48(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vfmacc.vv v15,v11,v9 #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v15,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.addi16sp sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   c.mv s0, sp
; block1: ; offset 0xc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   addi t6, s0, 0x10
;   .byte 0x87, 0x84
;   .byte 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x87, 0x85
;   .byte 0x0f, 0x02
;   addi t6, s0, 0x30
;   .byte 0x87, 0x87
;   .byte 0x0f, 0x02
;   .byte 0x57, 0x70
;   c.beqz a1, 0x18
;   .byte 0xd7, 0x97
;   c.fsd fa3, 0x60(a3)
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   .byte 0xa7, 0x07
;   c.addi tp, 1
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   c.addi16sp sp, 0x10
;   ret

function %fma_splat_f64x2(f64, f64x2, f64x2) -> f64x2 {
block0(v0: f64, v1: f64x2, v2: f64x2):
    v3 = splat.f64x2 v0
    v4 = fma v3, v1, v2
    return v4
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v10,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v14,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vfmacc.vf v14,v10,fa0 #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v14,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.addi16sp sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   c.mv s0, sp
; block1: ; offset 0xc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   addi t6, s0, 0x10
;   .byte 0x07, 0x85
;   .byte 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x07, 0x87
;   .byte 0x0f, 0x02
;   .byte 0x57, 0x70
;   c.beqz a1, 0x18
;   .byte 0x57, 0x57
;   c.j -0x698
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   .byte 0x27, 0x07
;   c.addi tp, 1
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   c.addi16sp sp, 0x10
;   ret

function %fma_neg_add_f64x2(f64x2, f64x2, f64x2) -> f64x2 {
block0(v0: f64x2, v1: f64x2, v2: f64x2):
    v3 = fneg v2
    v4 = fma v0, v1, v3
    return v4
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v11,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v15,48(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vfmsac.vv v15,v11,v9 #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v15,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.addi16sp sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   c.mv s0, sp
; block1: ; offset 0xc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   addi t6, s0, 0x10
;   .byte 0x87, 0x84
;   .byte 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x87, 0x85
;   .byte 0x0f, 0x02
;   addi t6, s0, 0x30
;   .byte 0x87, 0x87
;   .byte 0x0f, 0x02
;   .byte 0x57, 0x70
;   c.beqz a1, 0x18
;   .byte 0xd7, 0x97
;   c.fsd fa3, 0x70(a3)
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   .byte 0xa7, 0x07
;   c.addi tp, 1
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   c.addi16sp sp, 0x10
;   ret

function %fma_neg_add_splat_f64x2(f64, f64x2, f64x2) -> f64x2 {
block0(v0: f64, v1: f64x2, v2: f64x2):
    v3 = splat.f64x2 v0
    v4 = fneg v2
    v5 = fma v3, v1, v4
    return v5
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v10,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v14,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vfmsac.vf v14,v10,fa0 #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v14,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.addi16sp sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   c.mv s0, sp
; block1: ; offset 0xc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   addi t6, s0, 0x10
;   .byte 0x07, 0x85
;   .byte 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x07, 0x87
;   .byte 0x0f, 0x02
;   .byte 0x57, 0x70
;   c.beqz a1, 0x18
;   .byte 0x57, 0x57
;   c.j -0x688
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   .byte 0x27, 0x07
;   c.addi tp, 1
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   c.addi16sp sp, 0x10
;   ret

function %fma_neg_add_neg_mul_f64x2(f64x2, f64x2, f64x2) -> f64x2 {
block0(v0: f64x2, v1: f64x2, v2: f64x2):
    v3 = fneg v2
    v4 = fneg v0
    v5 = fma v4, v1, v3
    return v5
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v11,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v15,48(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vfnmacc.vv v15,v11,v9 #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v15,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.addi16sp sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   c.mv s0, sp
; block1: ; offset 0xc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   addi t6, s0, 0x10
;   .byte 0x87, 0x84
;   .byte 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x87, 0x85
;   .byte 0x0f, 0x02
;   addi t6, s0, 0x30
;   .byte 0x87, 0x87
;   .byte 0x0f, 0x02
;   .byte 0x57, 0x70
;   c.beqz a1, 0x18
;   .byte 0xd7, 0x97
;   c.fsd fa3, 0x68(a3)
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   .byte 0xa7, 0x07
;   c.addi tp, 1
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   c.addi16sp sp, 0x10
;   ret

function %fma_neg_add_neg_mul_splat_f64x2(f64, f64x2, f64x2) -> f64x2 {
block0(v0: f64, v1: f64x2, v2: f64x2):
    v3 = splat.f64x2 v0
    v4 = fneg v3
    v5 = fneg v2
    v6 = fma v4, v1, v5
    return v6
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v10,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v14,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vfnmacc.vf v14,v10,fa0 #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v14,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.addi16sp sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   c.mv s0, sp
; block1: ; offset 0xc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   addi t6, s0, 0x10
;   .byte 0x07, 0x85
;   .byte 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x07, 0x87
;   .byte 0x0f, 0x02
;   .byte 0x57, 0x70
;   c.beqz a1, 0x18
;   .byte 0x57, 0x57
;   c.j -0x498
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   .byte 0x27, 0x07
;   c.addi tp, 1
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   c.addi16sp sp, 0x10
;   ret

function %fma_neg_mul_f64x2(f64x2, f64x2, f64x2) -> f64x2 {
block0(v0: f64x2, v1: f64x2, v2: f64x2):
    v4 = fneg v0
    v5 = fma v4, v1, v2
    return v5
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v11,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v15,48(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vfnmsac.vv v15,v11,v9 #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v15,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.addi16sp sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   c.mv s0, sp
; block1: ; offset 0xc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   addi t6, s0, 0x10
;   .byte 0x87, 0x84
;   .byte 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x87, 0x85
;   .byte 0x0f, 0x02
;   addi t6, s0, 0x30
;   .byte 0x87, 0x87
;   .byte 0x0f, 0x02
;   .byte 0x57, 0x70
;   c.beqz a1, 0x18
;   .byte 0xd7, 0x97
;   c.fsd fa3, 0x78(a3)
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   .byte 0xa7, 0x07
;   c.addi tp, 1
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   c.addi16sp sp, 0x10
;   ret

function %fma_neg_add_neg_mul_splat_f64x2(f64, f64x2, f64x2) -> f64x2 {
block0(v0: f64, v1: f64x2, v2: f64x2):
    v3 = splat.f64x2 v0
    v4 = fneg v3
    v6 = fma v4, v1, v2
    return v6
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v10,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v14,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vfnmsac.vf v14,v10,fa0 #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v14,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.addi16sp sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   c.mv s0, sp
; block1: ; offset 0xc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   addi t6, s0, 0x10
;   .byte 0x07, 0x85
;   .byte 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x07, 0x87
;   .byte 0x0f, 0x02
;   .byte 0x57, 0x70
;   c.beqz a1, 0x18
;   .byte 0x57, 0x57
;   c.j -0x488
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   .byte 0x27, 0x07
;   c.addi tp, 1
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   c.addi16sp sp, 0x10
;   ret

