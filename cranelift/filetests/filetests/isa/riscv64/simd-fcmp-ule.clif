test compile precise-output
set unwind_info=false
target riscv64 has_v

function %simd_fcmp_ule_f32(f32x4, f32x4) -> i32x4 {
block0(v0: f32x4, v1: f32x4):
    v2 = fcmp ule v0, v1
    return v2
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v11,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmflt.vv v14,v11,v9 #avl=4, #vtype=(e32, m1, ta, ma)
;   vmnot.m v0,v14 #avl=4, #vtype=(e32, m1, ta, ma)
;   vmv.v.i v10,0 #avl=4, #vtype=(e32, m1, ta, ma)
;   vmerge.vim v12,v10,-1,v0.t #avl=4, #vtype=(e32, m1, ta, ma)
;   vse8.v v12,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.addi16sp sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   c.mv s0, sp
; block1: ; offset 0xc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   addi t6, s0, 0x10
;   .byte 0x87, 0x84
;   .byte 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x87, 0x85
;   .byte 0x0f, 0x02
;   .byte 0x57, 0x70
;   c.swsp zero, 0x98(sp)
;   .byte 0x57, 0x97
;   c.ld a3, 0x58(a3)
;   .byte 0x57, 0x20
;   .byte 0xe7, 0x76
;   .byte 0x57, 0x35
;   c.lw s0, 0x38(a2)
;   .byte 0x57, 0xb6
;   .byte 0xaf, 0x5c
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   .byte 0x27, 0x06
;   c.addi tp, 1
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   c.addi16sp sp, 0x10
;   ret

function %simd_fcmp_splat_rhs_ule_f32(f32x4, f32) -> i32x4 {
block0(v0: f32x4, v1: f32):
    v2 = splat.f32x4 v1
    v3 = fcmp ule v0, v2
    return v3
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmfgt.vf v13,v9,fa0 #avl=4, #vtype=(e32, m1, ta, ma)
;   vmnot.m v0,v13 #avl=4, #vtype=(e32, m1, ta, ma)
;   vmv.v.i v9,0 #avl=4, #vtype=(e32, m1, ta, ma)
;   vmerge.vim v11,v9,-1,v0.t #avl=4, #vtype=(e32, m1, ta, ma)
;   vse8.v v11,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.addi16sp sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   c.mv s0, sp
; block1: ; offset 0xc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   addi t6, s0, 0x10
;   .byte 0x87, 0x84
;   .byte 0x0f, 0x02
;   .byte 0x57, 0x70
;   c.swsp zero, 0x98(sp)
;   .byte 0xd7, 0x56
;   c.lui a3, 0xfffe5
;   .byte 0x57, 0xa0
;   c.ldsp a3, 0x170(sp)
;   .byte 0xd7, 0x34
;   c.lw s0, 0x38(a2)
;   .byte 0xd7, 0xb5
;   .byte 0x9f, 0x5c
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   .byte 0xa7, 0x05
;   c.addi tp, 1
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   c.addi16sp sp, 0x10
;   ret

function %simd_fcmp_splat_lhs_ule_f32(f32x4, f32) -> i32x4 {
block0(v0: f32x4, v1: f32):
    v2 = splat.f32x4 v1
    v3 = fcmp ule v2, v0
    return v3
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmflt.vf v13,v9,fa0 #avl=4, #vtype=(e32, m1, ta, ma)
;   vmnot.m v0,v13 #avl=4, #vtype=(e32, m1, ta, ma)
;   vmv.v.i v9,0 #avl=4, #vtype=(e32, m1, ta, ma)
;   vmerge.vim v11,v9,-1,v0.t #avl=4, #vtype=(e32, m1, ta, ma)
;   vse8.v v11,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.addi16sp sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   c.mv s0, sp
; block1: ; offset 0xc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   addi t6, s0, 0x10
;   .byte 0x87, 0x84
;   .byte 0x0f, 0x02
;   .byte 0x57, 0x70
;   c.swsp zero, 0x98(sp)
;   .byte 0xd7, 0x56
;   c.lui t4, 5
;   .byte 0x57, 0xa0
;   c.ldsp a3, 0x170(sp)
;   .byte 0xd7, 0x34
;   c.lw s0, 0x38(a2)
;   .byte 0xd7, 0xb5
;   .byte 0x9f, 0x5c
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   .byte 0xa7, 0x05
;   c.addi tp, 1
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   c.addi16sp sp, 0x10
;   ret

function %simd_fcmp_ule_f64(f64x2, f64x2) -> i64x2 {
block0(v0: f64x2, v1: f64x2):
    v2 = fcmp ule v0, v1
    return v2
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v11,32(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmflt.vv v14,v11,v9 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmnot.m v0,v14 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmv.v.i v10,0 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmerge.vim v12,v10,-1,v0.t #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v12,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.addi16sp sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   c.mv s0, sp
; block1: ; offset 0xc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   addi t6, s0, 0x10
;   .byte 0x87, 0x84
;   .byte 0x0f, 0x02
;   addi t6, s0, 0x20
;   .byte 0x87, 0x85
;   .byte 0x0f, 0x02
;   .byte 0x57, 0x70
;   c.beqz a1, 0x18
;   .byte 0x57, 0x97
;   c.ld a3, 0x58(a3)
;   .byte 0x57, 0x20
;   .byte 0xe7, 0x76
;   .byte 0x57, 0x35
;   c.lw s0, 0x38(a2)
;   .byte 0x57, 0xb6
;   .byte 0xaf, 0x5c
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   .byte 0x27, 0x06
;   c.addi tp, 1
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   c.addi16sp sp, 0x10
;   ret

function %simd_fcmp_splat_rhs_ule_f64(f64x2, f64) -> i64x2 {
block0(v0: f64x2, v1: f64):
    v2 = splat.f64x2 v1
    v3 = fcmp ule v0, v2
    return v3
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmfgt.vf v13,v9,fa0 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmnot.m v0,v13 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmv.v.i v9,0 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmerge.vim v11,v9,-1,v0.t #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v11,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.addi16sp sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   c.mv s0, sp
; block1: ; offset 0xc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   addi t6, s0, 0x10
;   .byte 0x87, 0x84
;   .byte 0x0f, 0x02
;   .byte 0x57, 0x70
;   c.beqz a1, 0x18
;   .byte 0xd7, 0x56
;   c.lui a3, 0xfffe5
;   .byte 0x57, 0xa0
;   c.ldsp a3, 0x170(sp)
;   .byte 0xd7, 0x34
;   c.lw s0, 0x38(a2)
;   .byte 0xd7, 0xb5
;   .byte 0x9f, 0x5c
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   .byte 0xa7, 0x05
;   c.addi tp, 1
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   c.addi16sp sp, 0x10
;   ret

function %simd_fcmp_splat_lhs_ule_f64(f64x2, f64) -> i64x2 {
block0(v0: f64x2, v1: f64):
    v2 = splat.f64x2 v1
    v3 = fcmp ule v2, v0
    return v3
}

; VCode:
;   add sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,16(fp) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmflt.vf v13,v9,fa0 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmnot.m v0,v13 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmv.v.i v9,0 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmerge.vim v11,v9,-1,v0.t #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v11,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   add sp,+16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   c.addi16sp sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   c.mv s0, sp
; block1: ; offset 0xc
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   addi t6, s0, 0x10
;   .byte 0x87, 0x84
;   .byte 0x0f, 0x02
;   .byte 0x57, 0x70
;   c.beqz a1, 0x18
;   .byte 0xd7, 0x56
;   c.lui t4, 5
;   .byte 0x57, 0xa0
;   c.ldsp a3, 0x170(sp)
;   .byte 0xd7, 0x34
;   c.lw s0, 0x38(a2)
;   .byte 0xd7, 0xb5
;   .byte 0x9f, 0x5c
;   .byte 0x57, 0x70
;   c.sw a0, 0x18(s0)
;   .byte 0xa7, 0x05
;   c.addi tp, 1
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   c.addi16sp sp, 0x10
;   ret

