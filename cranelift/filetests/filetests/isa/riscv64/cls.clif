test compile precise-output
set unwind_info=false
target riscv64

function %cls_i8(i8) -> i8 {
block0(v0: i8):
    v1 = cls v0
    return v1
}

; VCode:
; block0:
;   slli t2,a0,56
;   srai a1,t2,56
;   not a3,a0
;   select_reg a5,a3,a0##condition=(a1 slt zero)
;   clz t4,a5##ty=i8 tmp=a7 step=t3
;   addi a0,t4,-1
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   slli t2, a0, 0x38
;   srai a1, t2, 0x38
;   not a3, a0
;   bltz a1, 0xc
;   ori a5, a0, 0
;   j 8
;   ori a5, a3, 0
;   ori t4, zero, 0
;   addi t3, zero, 8
;   addi a7, zero, 1
;   slli a7, a7, 7
;   blez t3, 0x1c
;   and t5, a7, a5
;   bne zero, t5, 0x14
;   addi t4, t4, 1
;   addi t3, t3, -1
;   srli a7, a7, 1
;   j -0x18
;   addi a0, t4, -1
;   ret

function %cls_i16(i16) -> i16 {
block0(v0: i16):
    v1 = cls v0
    return v1
}

; VCode:
; block0:
;   slli t2,a0,48
;   srai a1,t2,48
;   not a3,a0
;   select_reg a5,a3,a0##condition=(a1 slt zero)
;   clz t4,a5##ty=i16 tmp=a7 step=t3
;   addi a0,t4,-1
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   slli t2, a0, 0x30
;   srai a1, t2, 0x30
;   not a3, a0
;   bltz a1, 0xc
;   ori a5, a0, 0
;   j 8
;   ori a5, a3, 0
;   ori t4, zero, 0
;   addi t3, zero, 0x10
;   addi a7, zero, 1
;   slli a7, a7, 0xf
;   blez t3, 0x1c
;   and t5, a7, a5
;   bne zero, t5, 0x14
;   addi t4, t4, 1
;   addi t3, t3, -1
;   srli a7, a7, 1
;   j -0x18
;   addi a0, t4, -1
;   ret

function %cls_i32(i32) -> i32 {
block0(v0: i32):
    v1 = cls v0
    return v1
}

; VCode:
; block0:
;   sext.w t2,a0
;   not a1,a0
;   select_reg a3,a1,a0##condition=(t2 slt zero)
;   clz a7,a3##ty=i32 tmp=a5 step=a6
;   addi a0,a7,-1
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   sext.w t2, a0
;   not a1, a0
;   bltz t2, 0xc
;   ori a3, a0, 0
;   j 8
;   ori a3, a1, 0
;   ori a7, zero, 0
;   addi a6, zero, 0x20
;   addi a5, zero, 1
;   slli a5, a5, 0x1f
;   blez a6, 0x1c
;   and t5, a5, a3
;   bne zero, t5, 0x14
;   addi a7, a7, 1
;   addi a6, a6, -1
;   srli a5, a5, 1
;   j -0x18
;   addi a0, a7, -1
;   ret

function %cls_i64(i64) -> i64 {
block0(v0: i64):
    v1 = cls v0
    return v1
}

; VCode:
; block0:
;   not t2,a0
;   select_reg a1,t2,a0##condition=(a0 slt zero)
;   clz a5,a1##ty=i64 tmp=a3 step=a4
;   addi a0,a5,-1
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   not t2, a0
;   bltz a0, 0xc
;   ori a1, a0, 0
;   j 8
;   ori a1, t2, 0
;   ori a5, zero, 0
;   addi a4, zero, 0x40
;   addi a3, zero, 1
;   slli a3, a3, 0x3f
;   blez a4, 0x1c
;   and t5, a3, a1
;   bne zero, t5, 0x14
;   addi a5, a5, 1
;   addi a4, a4, -1
;   srli a3, a3, 1
;   j -0x18
;   addi a0, a5, -1
;   ret

function %cls_i128(i128) -> i128 {
block0(v0: i128):
    v1 = cls v0
    return v1
}

; VCode:
; block0:
;   not a2,a0
;   select_reg a2,a2,a0##condition=(a1 slt zero)
;   not a4,a1
;   select_reg a6,a4,a1##condition=(a1 slt zero)
;   clz t0,a6##ty=i64 tmp=t3 step=t4
;   clz a1,a2##ty=i64 tmp=t2 step=a0
;   li a3,64
;   select_reg a5,a1,zero##condition=(a3 eq t0)
;   add a7,t0,a5
;   li t4,0
;   addi a0,a7,-1
;   li a1,0
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   not a2, a0
;   bltz a1, 8
;   ori a2, a0, 0
;   not a4, a1
;   bltz a1, 0xc
;   ori a6, a1, 0
;   j 8
;   ori a6, a4, 0
;   ori t0, zero, 0
;   addi t4, zero, 0x40
;   addi t3, zero, 1
;   slli t3, t3, 0x3f
;   blez t4, 0x1c
;   and t5, t3, a6
;   bne zero, t5, 0x14
;   addi t0, t0, 1
;   addi t4, t4, -1
;   srli t3, t3, 1
;   j -0x18
;   ori a1, zero, 0
;   addi a0, zero, 0x40
;   addi t2, zero, 1
;   slli t2, t2, 0x3f
;   blez a0, 0x1c
;   and t5, t2, a2
;   bne zero, t5, 0x14
;   addi a1, a1, 1
;   addi a0, a0, -1
;   srli t2, t2, 1
;   j -0x18
;   addi a3, zero, 0x40
;   beq a3, t0, 0xc
;   ori a5, zero, 0
;   j 8
;   ori a5, a1, 0
;   add a7, t0, a5
;   mv t4, zero
;   addi a0, a7, -1
;   mv a1, zero
;   ret
