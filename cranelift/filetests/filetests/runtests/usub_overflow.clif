test interpret

function %usubof_i64(i64, i64) -> i64 {
block0(v0: i64,v1: i64):
    v2, v3 = usub_overflow v0, v1
    return v2
}
; run: %usubof_i64(0, 0) == 0
; run: %usubof_i64(0, 1) == -1
; run: %usubof_i64(-1, 0) == -1
; run: %usubof_i64(-1, 1) == -2
; run: %usubof_i64(-1, -2) == 1
; run: %usubof_i64(0x7FFFFFFF_FFFFFFFF, 0x7FFFFFFF_FFFFFFFF) == 0
; run: %usubof_i64(0x7FFFFFFF_FFFFFFFF, 0x80000000_00000000) == -1
; run: %usubof_i64(0x7FFFFFFF_FFFFFFFF, 0x80000000_00000001) == -2
; run: %usubof_i64(0x01234567_89ABCDEF, 0xFEDCBA98_76543210) == 0x0246_8ACF_1357_9BDF
; run: %usubof_i64(0xFEDCBA98_76543220, 0x01234567_89ABCDEF) == 0xFDB9_7530_ECA8_6431

function %usubof_i64b(i64, i64) -> i8 {
block0(v0: i64,v1: i64):
    v2, v3 = usub_overflow v0, v1
    return v3
}
; run: %usubof_i64b(0, 0) == 0
; run: %usubof_i64b(0, 1) == 1
; run: %usubof_i64b(-1, 0) == 0
; run: %usubof_i64b(-1, 1) == 0
; run: %usubof_i64b(-1, -2) == 0
; run: %usubof_i64b(0x7FFFFFFF_FFFFFFFF, 0x7FFFFFFF_FFFFFFFF) == 0
; run: %usubof_i64b(0x7FFFFFFF_FFFFFFFF, 0x80000000_00000000) == 1
; run: %usubof_i64b(0x7FFFFFFF_FFFFFFFF, 0x80000000_00000001) == 1
; run: %usubof_i64b(0x01234567_89ABCDEF, 0xFEDCBA98_76543210) == 1
; run: %usubof_i64b(0xFEDCBA98_76543220, 0x01234567_89ABCDEF) == 0

function %usubof_i8(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
    v2, v3 = usub_overflow v0, v1
    return v2
}
; run: %usubof_i8(0, 1) == -1
; run: %usubof_i8(100, 20) == 80
; run: %usubof_i8(100, -20) == 120
; run: %usubof_i8(128, -128) == 0
; run: %usubof_i8(-128, -128) == 0
; run: %usubof_i8(0x80, 1) == 0x7F

function %usubof_i8b(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
    v2, v3 = usub_overflow v0, v1
    return v3
}
; run: %usubof_i8b(0, 1) == 1
; run: %usubof_i8b(100, 20) == 0
; run: %usubof_i8b(100, -20) == 1
; run: %usubof_i8b(127, -128) == 1
; run: %usubof_i8b(0x80, 0x80) == 0
; run: %usubof_i8b(0xFF, 0xFF) == 0
; run: %usubof_i8b(0xFE, 0xFF) == 1
; run: %usubof_i8b(0x80, 1) == 0

function %usubof_i16(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
    v2, v3 = usub_overflow v0, v1
    return v2
}
; run: %usubof_i16(0, 1) == -1
; run: %usubof_i16(100, 20) == 80
; run: %usubof_i16(0xFFFF, 0xFFFF) == 0
; run: %usubof_i16(0xFFFE, 0xFFFF) == -1
; run: %usubof_i16(0xFFFE, 0xFE) == 0xFF00

function %usubof_i16b(i16, i16) -> i8 {
block0(v0: i16, v1: i16):
    v2, v3 = usub_overflow v0, v1
    return v3
}
; run: %usubof_i16b(0, 1) == 1
; run: %usubof_i16b(100, 20) == 0
; run: %usubof_i16b(0xFFFF, 0xFFFF) == 0
; run: %usubof_i16b(0xFFFE, 0xFFFF) == 1
; run: %usubof_i16b(0xFFFE, 0xFE) == 0

function %usubof_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2, v3 = usub_overflow v0, v1
    return v2
}
; run: %usubof_i32(0, 1) == -1
; run: %usubof_i32(100, 20) == 80
; run: %usubof_i32(0xFFFF_FFFF, 0xFFFF_FFFF) == 0
; run: %usubof_i32(0xFFFF_FFFE, 0xFFFF_FFFF) == -1
; run: %usubof_i32(0xFFFF_FFFE, 0xFE) == 0xFFFF_FF00

function %usubof_i32b(i32, i32) -> i8 {
block0(v0: i32, v1: i32):
    v2, v3 = usub_overflow v0, v1
    return v3
}
; run: %usubof_i32b(0, 1) == 1
; run: %usubof_i32b(100, 20) == 0
; run: %usubof_i32b(0xFFFF_FFFF, 0xFFFF_FFFF) == 0
; run: %usubof_i32b(0xFFFF_FFFE, 0xFFFF_FFFF) == 1
; run: %usubof_i32b(0xFFFF_FFFE, 0xFE) == 0