test interpret
test run
target x86_64
target aarch64

function %smulof_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2, v3 = smul_overflow v0, v1
    return v2
}

; run: %smulof_i64(0, 1) == 0
; run: %smulof_i64(1, 1) == 1
; run: %smulof_i64(0xFFFFFFFF_FFFFFFFF, 2) == 0xFFFFFFFF_FFFFFFFE
; run: %smulof_i64(0x7FFFFFFF_FFFFFFFF, 2) == 0xFFFFFFFF_FFFFFFFE
; run: %smulof_i64(1, -1) == -1
; run: %smulof_i64(2, 2) == 4
; run: %smulof_i64(2, -2) == -4
; run: %smulof_i64(0x7FFFFFFF_FFFFFFFF, 0x7FFFFFFF_FFFFFFFF) == 1
; run: %smulof_i64(0x80000000_00000000, 0x7FFFFFFF_FFFFFFFF) == 0x80000000_00000000
; run: %smulof_i64(0x01234567_89ABCDEF, 0xFEDCBA98_76543210) == 0x2236D88F_E5618CF0
; run: %smulof_i64(0xC0FFEEEE_C0FFEEEE, 0xDECAFFFF_DECAFFFF) == 0xDB6B1E48_19BA1112

function %smulof_i64b(i64, i64) -> i8 {
block0(v0: i64, v1: i64):
    v2, v3 = smul_overflow v0, v1
    return v3
}

; run: %smulof_i64b(0, 1) == 0
; run: %smulof_i64b(1, 1) == 0
; run: %smulof_i64b(0xFFFFFFFF_FFFFFFFF, 2) == 0
; run: %smulof_i64b(0x7FFFFFFF_FFFFFFFF, 2) == 1
; run: %smulof_i64b(1, -1) == 0
; run: %smulof_i64b(2, 2) == 0
; run: %smulof_i64b(2, -2) == 0
; run: %smulof_i64b(0x7FFFFFFF_FFFFFFFF, 0x7FFFFFFF_FFFFFFFF) == 1
; run: %smulof_i64b(0x80000000_00000000, 0x7FFFFFFF_FFFFFFFF) == 1
; run: %smulof_i64b(0x01234567_89ABCDEF, 0xFEDCBA98_76543210) == 1
; run: %smulof_i64b(0xC0FFEEEE_C0FFEEEE, 0xDECAFFFF_DECAFFFF) == 1

function %smulof_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2, v3 = smul_overflow v0, v1
    return v2
}

; run: %smulof_i32(0, 1) == 0
; run: %smulof_i32(1, 1) == 1
; run: %smulof_i32(0xFFFFFFFF, 2) == 0xFFFFFFFE
; run: %smulof_i32(0x7FFFFFFF, 2) == 0xFFFFFFFE
; run: %smulof_i32(1, -1) == -1
; run: %smulof_i32(2, 2) == 4
; run: %smulof_i32(2, -2) == -4
; run: %smulof_i32(0x7FFFFFFF, 0x7FFFFFFF) == 1
; run: %smulof_i32(0x80000000, 0x7FFFFFFF) == 0x80000000
; run: %smulof_i32(0x01234567, 0xFEDCBA98) == 0x23E20B28
; run: %smulof_i32(0xC0FFEEEE, 0xDECAFFFF) == 0x19BA1112

function %smulof_i32b(i32, i32) -> i8 {
block0(v0: i32, v1: i32):
    v2, v3 = smul_overflow v0, v1
    return v3
}

; run: %smulof_i32b(0, 1) == 0
; run: %smulof_i32b(1, 1) == 0
; run: %smulof_i32b(0xFFFFFFFF, 2) == 0
; run: %smulof_i32b(0x7FFFFFFF, 2) == 1
; run: %smulof_i32b(1, -1) == 0
; run: %smulof_i32b(2, 2) == 0
; run: %smulof_i32b(2, -2) == 0
; run: %smulof_i32b(0x7FFFFFFF, 0x7FFFFFFF) == 1
; run: %smulof_i32b(0x80000000, 0x7FFFFFFF) == 1
; run: %smulof_i32b(0x01234567, 0xFEDCBA98) == 1
; run: %smulof_i32b(0xC0FFEEEE, 0xDECAFFFF) == 1

function %smulof_i16(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
    v2, v3 = smul_overflow v0, v1
    return v2
}

; run: %smulof_i16(0, 1) == 0
; run: %smulof_i16(1, 1) == 1
; run: %smulof_i16(0xFFFF, 2) == 0xFFFE
; run: %smulof_i16(0x7FFF, 2) == 0xFFFE
; run: %smulof_i16(1, -1) == -1
; run: %smulof_i16(2, 2) == 4
; run: %smulof_i16(2, -2) == -4
; run: %smulof_i16(0x7FFF, 0x7FFF) == 1
; run: %smulof_i16(0x8000, 0x7FFF) == 0x8000
; run: %smulof_i16(0x0123, 0xFEDC) == 0xB414
; run: %smulof_i16(0xC0FF, 0xDECA) == 0x6B36

function %smulof_i16b(i16, i16) -> i8 {
block0(v0: i16, v1: i16):
    v2, v3 = smul_overflow v0, v1
    return v3
}

; run: %smulof_i16b(0, 1) == 0
; run: %smulof_i16b(1, 1) == 0
; run: %smulof_i16b(0xFFFF, 2) == 0
; run: %smulof_i16b(0x7FFF, 2) == 1
; run: %smulof_i16b(1, -1) == 0
; run: %smulof_i16b(2, 2) == 0
; run: %smulof_i16b(2, -2) == 0
; run: %smulof_i16b(0x7FFF, 0x7FFF) == 1
; run: %smulof_i16b(0x8000, 0x7FFF) == 1
; run: %smulof_i16b(0x0123, 0xFEDC) == 1
; run: %smulof_i16b(0xC0FF, 0xDECA) == 1

function %smulof_i8(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
    v2, v3 = smul_overflow v0, v1
    return v2
}

; run: %smulof_i8(0, 1) == 0
; run: %smulof_i8(1, 1) == 1
; run: %smulof_i8(0xFF, 2) == 0xFE
; run: %smulof_i8(0x7F, 2) == 0xFE
; run: %smulof_i8(1, -1) == -1
; run: %smulof_i8(2, 2) == 4
; run: %smulof_i8(2, -2) == -4
; run: %smulof_i8(0x7F, 0x7F) == 1
; run: %smulof_i8(0x80, 0x7F) == 0x80
; run: %smulof_i8(0x01, 0xFE) == 0xFE
; run: %smulof_i8(0xC0, 0xDE) == 0x80

function %smulof_i8b(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
    v2, v3 = smul_overflow v0, v1
    return v3
}

; run: %smulof_i8b(0, 1) == 0
; run: %smulof_i8b(1, 1) == 0
; run: %smulof_i8b(0xFF, 2) == 0
; run: %smulof_i8b(0x7F, 2) == 1
; run: %smulof_i8b(1, -1) == 0
; run: %smulof_i8b(2, 2) == 0
; run: %smulof_i8b(2, -2) == 0
; run: %smulof_i8b(0x7F, 0x7F) == 1
; run: %smulof_i8b(0x80, 0x7F) == 1
; run: %smulof_i8b(0x01, 0xFE) == 0
; run: %smulof_i8b(0xC0, 0xDE) == 1